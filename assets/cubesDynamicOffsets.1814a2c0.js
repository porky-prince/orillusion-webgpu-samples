import"./modulepreload-polyfill.b7f2da20.js";import{b as y}from"./basic.vert.9475eb7d.js";import{p as P}from"./position.frag.0b35f8ff.js";import{v as l,a as g}from"./cube.aa091a3d.js";import{b as m}from"./math.cb05c6db.js";async function B(e){if(!navigator.gpu)throw new Error("Not Support WebGPU");const o=await navigator.gpu.requestAdapter();if(!o)throw new Error("No Adapter Found");const i=await o.requestDevice(),a=e.getContext("webgpu"),r=navigator.gpu.getPreferredCanvasFormat?navigator.gpu.getPreferredCanvasFormat():a.getPreferredFormat(o),t=window.devicePixelRatio||1;e.width=e.clientWidth*t,e.height=e.clientHeight*t;const n={width:e.width,height:e.height};return a.configure({device:i,format:r,compositingAlphaMode:"opaque"}),{device:i,context:a,format:r,size:n}}async function b(e,o,i){const a=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0,minBindingSize:0}}]}),r=e.createPipelineLayout({bindGroupLayouts:[a]}),t=await e.createRenderPipelineAsync({label:"Basic Pipline",layout:r,vertex:{module:e.createShaderModule({code:y}),entryPoint:"main",buffers:[{arrayStride:5*4,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:3*4,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({code:P}),entryPoint:"main",targets:[{format:o}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}}),n=e.createTexture({size:i,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),u=e.createBuffer({label:"GPUBuffer store vertex",size:l.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(u,0,l);const s=e.createBuffer({label:"GPUBuffer store 2 4*4 matrix",size:256*2,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),f=e.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:s,size:4*16}}]});return{pipeline:t,vertexBuffer:u,mvpBuffer:s,group:f,depthTexture:n}}function T(e,o,i){const a=e.createCommandEncoder(),r={colorAttachments:[{view:o.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:i.depthTexture.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},t=a.beginRenderPass(r);t.setPipeline(i.pipeline),t.setVertexBuffer(0,i.vertexBuffer);const n=new Uint32Array([0,256]);t.setBindGroup(0,i.group,n,0,1),t.draw(g),t.setBindGroup(0,i.group,n,1,1),t.draw(g),t.end(),e.queue.submit([a.finish()])}async function U(){const e=document.querySelector("canvas");if(!e)throw new Error("No Canvas");const{device:o,context:i,format:a,size:r}=await B(e),t=await b(o,a,r);let n=r.width/r.height;const u={x:2,y:0,z:-8},s={x:0,y:0,z:0},f={x:1,y:1,z:1},x={x:-2,y:0,z:-8},d={x:0,y:0,z:0},w={x:1,y:1,z:1};function h(){const c=Date.now()/1e3;{s.x=Math.sin(c),s.y=Math.cos(c);const p=m(n,u,s,f);o.queue.writeBuffer(t.mvpBuffer,0,p)}{d.x=Math.cos(c),d.y=Math.sin(c);const p=m(n,x,d,w);o.queue.writeBuffer(t.mvpBuffer,256,p)}T(o,i,t),requestAnimationFrame(h)}h(),window.addEventListener("resize",()=>{r.width=e.width=e.clientWidth*devicePixelRatio,r.height=e.height=e.clientHeight*devicePixelRatio,t.depthTexture.destroy(),t.depthTexture=o.createTexture({size:r,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),n=r.width/r.height})}U();
